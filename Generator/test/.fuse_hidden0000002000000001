/////////////////////////////////////////////////////////////////////////
//                                                                     //
//  Analyzer for making mini-ntuple for HiggstoTauTau GEN level events //
//                                                                     //
/////////////////////////////////////////////////////////////////////////

////////////////////
// FRAMEWORK HEADERS
#include "FWCore/PluginManager/interface/ModuleDef.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/ServiceRegistry/interface/Service.h"

///////////////////////
// DATA FORMATS HEADERS
#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/Common/interface/EDProduct.h"
#include "DataFormats/Common/interface/Ref.h"

//#include "DataFormats/L1TrackTrigger/interface/TTTypes.h"
//#include "DataFormats/L1TrackTrigger/interface/TTCluster.h"
//#include "DataFormats/L1TrackTrigger/interface/TTStub.h"
//#include "DataFormats/L1TrackTrigger/interface/TTTrack.h"
//#include "SimDataFormats/TrackingAnalysis/interface/TrackingParticle.h"
//#include "SimDataFormats/TrackingAnalysis/interface/TrackingVertex.h"
//#include "SimDataFormats/TrackingHit/interface/PSimHitContainer.h"
//#include "SimDataFormats/TrackingHit/interface/PSimHit.h"
//#include "SimTracker/TrackTriggerAssociation/interface/TTClusterAssociationMap.h"
//#include "SimTracker/TrackTriggerAssociation/interface/TTStubAssociationMap.h"
//#include "SimTracker/TrackTriggerAssociation/interface/TTTrackAssociationMap.h"
//#include "Geometry/Records/interface/StackedTrackerGeometryRecord.h"
//#include "Geometry/TrackerGeometryBuilder/interface/StackedTrackerGeometry.h"
//#include "DataFormats/L1TrackTrigger/interface/L1TkEmParticle.h"
//#include "DataFormats/L1TrackTrigger/interface/L1TkEmParticleFwd.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "SimDataFormats/GeneratorProducts/interface/HepMCProduct.h"
#include "DataFormats/Candidate/interface/Candidate.h"
//#include "SimDataFormats/SLHC/interface/L1EGCrystalCluster.h"

////////////////
// PHYSICS TOOLS
#include "CommonTools/UtilAlgos/interface/TFileService.h"

///////////////
// ROOT HEADERS
#include <TROOT.h>
#include <TCanvas.h>
#include <TTree.h>
#include <TFile.h>
#include <TF1.h>
#include <TH2F.h>
#include <TH1F.h>

//////////////
// STD HEADERS
#include <memory>
#include <string>
#include <iostream>

//////////////
// NAMESPACES
using namespace std;
using namespace edm;
using namespace reco;

//////////////////////////////
//                          //
//     CLASS DEFINITION     //
//                          //
//////////////////////////////

class GeneratorNtupleMaker : public edm::EDAnalyzer
{
public:

  // Constructor/destructor
  explicit GeneratorNtupleMaker(const edm::ParameterSet& iConfig);
  virtual ~GeneratorNtupleMaker();

  // Mandatory methods
  virtual void beginJob();
  virtual void endJob();
  virtual void analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup);
  
protected:
  
private:
  
  // Containers of parameters passed by python configuration file
  edm::ParameterSet config; 
  
  int MyProcess;

  //-----------------------------------------------------------------------------------------------
  // tree & branches for mini-ntuple

  TTree* eventTree;

  // GEN Objects
  std::vector<float>* m_gen_pt;
  std::vector<float>* m_gen_eta;
  std::vector<float>* m_gen_phi;
  std::vector<float>* m_gen_z;
  std::vector<int>* m_gen_id;
  std::vector<float>* m_daug_pt;
  std::vector<float>* m_daug_eta;
  std::vector<float>* m_daug_phi;
  //std::vector<float>* m_daug_z;
  std::vector<int>* m_daug_id;

};


//////////////////////////////////
//                              //
//     CLASS IMPLEMENTATION     //
//                              //
//////////////////////////////////

//////////////
// CONSTRUCTOR
GeneratorNtupleMaker::GeneratorNtupleMaker(edm::ParameterSet const& iConfig) : 
  config(iConfig)
{

  MyProcess = iConfig.getParameter< int >("MyProcess");
  
}

/////////////
// DESTRUCTOR
GeneratorNtupleMaker::~GeneratorNtupleMaker()
{
}  

//////////
// END JOB
void GeneratorNtupleMaker::endJob()
{
  // things to be done at the exit of the event Loop
  cerr << "GeneratorNtupleMaker::endJob" << endl;

}

////////////
// BEGIN JOB
void GeneratorNtupleMaker::beginJob()
{

  // things to be done before entering the event Loop
  cerr << "GeneratorNtupleMaker::beginJob" << endl;


  //-----------------------------------------------------------------------------------------------
  // book histograms / make ntuple
  edm::Service<TFileService> fs;


  // initilize
  m_gen_pt   = new std::vector<float>;
  m_gen_eta  = new std::vector<float>;
  m_gen_phi  = new std::vector<float>;
  m_gen_z    = new std::vector<float>;
  m_gen_id   = new std::vector<int>;

  m_daug_pt   = new std::vector<float>;
  m_daug_eta  = new std::vector<float>;
  m_daug_phi  = new std::vector<float>;
  //m_daug_z    = new std::vector<float>;
  m_daug_id   = new std::vector<int>; 

  
  // ntuple
  eventTree = fs->make<TTree>("H2TauTauTree", "Event tree");

  eventTree->Branch("gen_pt",      &m_gen_pt);
  eventTree->Branch("gen_eta",     &m_gen_eta);
  eventTree->Branch("gen_phi",     &m_gen_phi);
  eventTree->Branch("gen_z",       &m_gen_z);
  eventTree->Branch("gen_id",      &m_gen_id);

  eventTree->Branch("daug_pt",      &m_daug_pt);
  eventTree->Branch("daug_eta",     &m_daug_eta);
  eventTree->Branch("daug_phi",     &m_daug_phi);
  //eventTree->Branch("daug_z",       &m_daug_z);
  eventTree->Branch("daug_id",      &m_daug_id);

}


//
// member functions
//


//////////
// ANALYZE
void GeneratorNtupleMaker::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{

  // clear variables
  m_gen_pt->clear();
  m_gen_eta->clear();
  m_gen_phi->clear();
  m_gen_z->clear();
  m_gen_id->clear();

  m_daug_pt->clear();
  m_daug_eta->clear();
  m_daug_phi->clear();
  //m_daug_z->clear();
  m_daug_id->clear();

  //-----------------------------------------------------------------------------------------------
  // retrieve various containers
  //-----------------------------------------------------------------------------------------------
  
  // MC truth association maps
  //edm::Handle< TTTrackAssociationMap< Ref_PixelDigi_ > > MCTruthTTTrackHandle;
  //iEvent.getByLabel("TTTrackAssociatorFromPixelDigis", "Level1TTTracks", MCTruthTTTrackHandle);
  //edm::Handle< TTClusterAssociationMap< Ref_PixelDigi_ > > MCTruthTTClusterHandle;
  //iEvent.getByLabel("TTClusterAssociatorFromPixelDigis", "ClusterAccepted", MCTruthTTClusterHandle);
  //edm::Handle< TTStubAssociationMap< Ref_PixelDigi_ > > MCTruthTTStubHandle;
  //iEvent.getByLabel("TTStubAssociatorFromPixelDigis", "StubAccepted", MCTruthTTStubHandle);

  // tracking particles
  //edm::Handle< std::vector< TrackingParticle > > TrackingParticleHandle;
  //edm::Handle< std::vector< TrackingVertex > > TrackingVertexHandle;
  //iEvent.getByLabel("mix", "MergedTrackTruth", TrackingParticleHandle);
  //iEvent.getByLabel("mix", "MergedTrackTruth", TrackingVertexHandle);


  //Get generator MC truth

  Handle<GenParticleCollection> genParticles;
  iEvent.getByLabel("genParticles", genParticles);

  int nhiggs=0;

  cout << "gen size: " << genParticles->size() << endl;

  for(size_t i = 0; i < genParticles->size(); ++ i) {
    const GenParticle & p = (*genParticles)[i];
    int id = p.pdgId();
    //int st = p.status();
    if (id!=25) continue;
    double tmp_eta=p.p4().eta();
    double tmp_phi=p.p4().phi();
    double tmp_pt=p.p4().pt();
    double tmp_z = p.vz();

    m_gen_pt  -> push_back(tmp_pt);
    m_gen_eta -> push_back(tmp_eta);
    m_gen_phi -> push_back(tmp_phi);
    m_gen_z   -> push_back(tmp_z);
    m_gen_id  -> push_back(id);
  
    //if(abs(p.daughter(0)->pdgId())==15) continue;  //skip if daugther is tau
    //int nmother=p.numberOfMothers();
    //if (nmother!=1) continue;
    //if (p.mother(0)->pdgId()!=25) continue;

    //double vx = p.vx(), vy = p.vy(), vz = p.vz();

    //std::cout << "vertex : "<<vx<<" "<<vy<<" "<<vz<<std::endl;

    //std::cout << "i id st eta: "<<i<<" "<<id<<" "<<st<<" "<<eta<<std::endl;


    int ndaug = p.numberOfDaughters();

    for(int idaug=0;idaug<ndaug;idaug++) {
      //const reco::Candidate * daug = p.daughter(idaug);
      const GenParticle & daug
      
      if (daug->pdgId()==25) continue;
      m_daug_pt  -> push_back(daug->pt());
      m_daug_eta -> push_back(daug->eta());
      m_daug_phi -> push_back(daug->phi());
      m_daug_id  -> push_back(daug->pdgId());
    }

    cout << "number of daughters = " << ndaug << endl;

    nhiggs++;
  }

  eventTree->Fill();

} //end of analyze()


///////////////////////////
// DEFINE THIS AS A PLUG-IN
DEFINE_FWK_MODULE(GeneratorNtupleMaker);
